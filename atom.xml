<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[ShiningChan's Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2014-02-21T07:38:39.596Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Shining Chan]]></name>
    
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[一种物联网普适计算的DIY方法：智能闹钟 (译)]]></title>
    <link href="http://yoursite.com/2014/02/20/diy-smart-alarm-clock-with-raspberry-pi/"/>
    <id>http://yoursite.com/2014/02/20/diy-smart-alarm-clock-with-raspberry-pi/</id>
    <published>2014-02-20T03:15:13.000Z</published>
    <updated>2014-02-21T07:37:53.000Z</updated>
    <content type="html"><![CDATA[<h2 id="-">原文</h2>
<p><a href="http://www.deepdyve.com/lp/institute-of-electrical-and-electronics-engineers/a-diy-approach-to-pervasive-computing-for-the-internet-of-things-a-KOj52wCzTu" target="_blank">http://www.deepdyve.com/lp/institute-of-electrical-and-electronics-engineers/a-diy-approach-to-pervasive-computing-for-the-internet-of-things-a-KOj52wCzTu</a></p>
<h2 id="-">摘要</h2>
<p>本文通过一个智能闹钟的例子，探讨了物联网（IoT）DIY社区如何使用最新开发的低成本系统级芯片（SoC）开发板来促进智能对象的创新进程。这个闹钟将使用本地的温度传感器读数结合现有的交通和天气Web服务，提供给用
户合适的提醒时间。并且包括了一个对现今可用的物联网部件和最先进的提
供增强功能的闹钟的简要回顾。提供一种对闹钟软硬件部件描述和判断。CPU
和内存资源测试表明了SoC设备在智能闹钟下的适用性。用户反馈则为闹钟功
能提供了进一步发展的建议。</p>
<a id="more"></a>

<h2 id="-">关键词</h2>
<p>物联网，智能闹钟，树莓派，系统级芯片，DIY，XBEE，智能对象</p>
<h2 id="-">导言</h2>
<p>除了经济利益的驱使之外，人类对于DIY有着强烈的驱动力，将DIY作为创造力，控制力，多元化，社会性的过度消费主义和全球化的出口，甚至仅仅是简单地想要自己实现[1]。最近的DIY电子设备趋势给在物联网（早期被称为嵌入式网络设备[2]）和智能城市、智能家居中进行大量创新提供了工具。</p>
<p>智能物体是物联网的关键组件，它定义了物体的扩展能力，比如逻辑处理，信息存储，传感，现实世界的事件驱动和网络通信，并通过小型计算机使之成为可能。智能物体可以在彼此间通信和互动，以及与环境，互联网和人类通信[3]。现有的一个智能物体的例子是Karotz[4]，它是一个基于互联网的语音激活智能兔子，它所消耗的feed是从一个Web服务中选择，并且大声的读取feed。Karotz还集成了RFID传感器，用来检测可用的RFID标签的存在。</p>
<p>本文侧重于通过智能闹钟这样一个形式去评估对于在智能物体的创新中最先进的SoC技术的使用。该装置将具备将本地的温度传感器读数结合交通和天气Web服务数据，来自动调整提醒时间的能力，以便于终端用户在预定的时间到达一个位置。这种装置可以减轻旅途中规划的负担，同时减少浪费在交通拥挤的时间，准时到达他们的目的地。</p>
<h2 id="1-">1.智能对象创新的可用技术</h2>
<h4 id="-soc-">微控制器和系统级芯片（SoC）板</h4>
<p>低成本且低功率的微控制器和SoC板的出现，使得可以使用高级语言，比如C#或者Python进行编程，这有助于物联网智能对象的创新[5]。Arduino（使用Wiring编程），Gadgeteer和Netduino（都使用.Net框架编程）都是微控板的例子。一个SoC板子则相当于一个跑了操作系统的PC。SoC板子的例子是树莓派，它使用自有版本的Linux操作系统，称之为Raspbian[6]。Python是Raspbian系统下预装的默认编程语言，选择它是由于其简单性和解释性语言特征，这意味着可以无需编译直接执行代码[6]。一个SoC板子提供的主要好处是，它能在一个适于集成到智能物体的小设备中跑多个进程。</p>
<h4 id="-">智能对象和他们与现实世界的交互</h4>
<p>智能物体需要有能从他们当前环境收集数据，并触发现实世界事件的能力。这一般通过电子传感器和执行器来实现。现在对于DIY爱好者而言，已经有大量的低成本模拟和数字电子传感器可用，包括光，颜色，弯曲，力，运动，压力，温度，湿度，脉冲，加速度和倾斜传感器等等[7]。执行器可以用于开关发光二极管，发动机，音频输出设备和电子继电器等等。智能物体另一个主要的功能是能够通过本地网络或者互联网传输和接收数据。有很多网络产品被设计成用于低功耗协议，比如6LoWPAN和ZigBee，它们越来越流行用于创造个人无线传感器网络。Digi International公司的XBEE和思科的XRF无线电台是这类解决方案的例子。低功耗使得这些无线电设备很适用于传输和接收传感器小数据包和驱动数据（不同于标准化的Wi-Fi发送器，它被设计用于传输大型的多媒体文件数据）</p>
<h2 id="2-">2.回顾现行最先进的闹钟</h2>
<p>在写这篇论文的时候，市售的智能闹钟没有基于天气和交通条件动态调整提醒时间的功能。一些商业的闹钟，比如La Crosse WE-8115U-S 原子数字时钟[8]，具有将室内外温湿度读数显示在时钟LCD上的功能，但是却没有对这些读数进行逻辑处理。</p>
<h4 id="-">智能闹钟原型</h4>
<p>动态可编程闹钟（DPAC）是一种自我设定的闹钟，它由波士顿东北大学的学生MA设计，使用谷歌日历上的日程去设置提醒时间，并基于现行交通、天气状况进行自动调整[9].Web服务请求和闹钟逻辑通过供给时钟的提醒时间外部Web服务来运行。</p>
<p>Rise闹钟[10]是另外一个原型，它利用交通状况去计算最佳的提醒时间。它并不把天气数据存在账户内，并且需要通过电话机插座连接到互联网。</p>
<h4 id="-">智能手机的闹钟程序</h4>
<p>Smart Alarm Clock Pro++ 是一个智能闹钟程序的例子，它使用天气状态去自动调整提醒时间。程序也添加了RSS功能和天气Feeds。这种应用逻辑决定了提醒时间仅限于根据天气预报，而不把交通状况纳入考虑范围内。</p>
<p>虽然通过智能手机下载一个智能闹钟应用有着无需初始硬件支出的好处，手机需要一个合适的底座和充足电源供应去显示专用的闹钟。</p>
<h2 id="3-">3.闹钟功能</h2>
<p>智能闹钟的一个主要特征是运行包含当地传感器数据和网络服务的内部逻辑，并根据预定位置和期望的时间，来确定对于终端用户最佳的提醒时间。提醒时间的调整，依赖于交通状况和天气预报数据的精确性。本地天气传感器的读数可以用于进一步的调整提醒时间，以便驾驶员有足够时间去对他们的交通工具除雪。本地的天气传感器可以用于根据用户的当地环境提高读数精确度。智能闹钟的其它特征包括：</p>
<ul>
<li>通过网络服务来滚动显示新闻标题</li>
<li>访问互联网电台</li>
<li>为预定的路线显示当前的交通状况</li>
<li>通过网络服务显示当地的天气</li>
<li>存放自定义Web页面，以便使用一个局域网内的电脑作为闹钟</li>
</ul>
<h2 id="4-">4.闹钟的体系架构</h2>
<h4 id="-">闹钟的硬件</h4>
<p>根据第3节中的信息，智能闹钟可以被用于执行逻辑函数，因此一个SoC板子是必要的。我们选择了现成的树莓派，它有一个活跃的开发者社区分享项目和技术指引[11]。由于树莓派被限制于通过它所连接的网络获取时间信息，额外添加一个实时时钟（RTC）模块，可以确保在网络不可用的情况下有正确的时间读数。</p>
<p>本地传感器和树莓派之间的温湿度读数使用XBEE无线发送器来提供数据通信。XBEE发送器提供了低功耗的数据传输功能，并拥有文档完善的API[12]。一个20x4字符的（HD44780）液晶显示器[13]提供了可视化的闹钟数据显示。对于长度超过20个文本的字符串可以滚动显示。控制板用来提供闹钟的用户输入界面，它有5个输入按钮，由8位端口拓展器芯片（MCP23008）[14]连接到树莓派的I2C接口组成。树莓派的3.5毫米音频输出插孔连接了一个合适的放大器解决方案和扬声器作为闹钟的音频输出。</p>
<p><img src="http://ww3.sinaimg.cn/large/674a21d2gw1edq5udplnlj20ty0iejuo.jpg" alt="图1-树莓派智能闹钟和本地温度传感器接线图"></p>
<h4 id="-">本地温湿度传感器的硬件</h4>
<p>RHT03数字式温湿度传感器提供了高精度且可靠的读数[15]。Netduino Plus 2[16]微控制器板用于处理传感器的读数以及通过UART端口传输它们到无线XBEE模块。如果希望更省电，可以使用一个更小的控制器接口代替Netduino Plus 2，这样可以使用电池给传感器供电。</p>
<h4 id="-web-">软件和Web服务</h4>
<p>由于Raspbian系统预装了Python语言环境，以及它对于GPIO引脚驱动的原生支持，闹钟软件使用Python来实现。Netduino Plus 2使用.Net框架编写，并且使用C#语言去收集和传输本地传感器数据。</p>
<p>Bing地图REST服务[17]提供了一个简单的RESTful接口请求道路沿线交通数据，因此被用做提醒时间计算的Web服务。天气数据收集则是通过英国气象局[18]以简单格式提供的DataPoint API。XBEE通信是通过XBEE API来进行错误校验以确保传感器数据传输的正确性。使用音乐播放器守护程序（MPD）来建立网络收音机，并通过MPC客户端[19]来访问。</p>
<h4 id="-">闹钟软件的实现</h4>
<p><img src="http://ww4.sinaimg.cn/large/674a21d2gw1edq6e23g7oj20uw0isjuw.jpg" alt="图2-软件体系结构框架图"></p>
<h2 id="5-">5.评价</h2>
<p>初步测试表明树莓派可以干练地运行智能闹钟应用，同时处理Web服务，本地传感器数据请求，LCD输出，控制板输入请求和自有的web服务器上运行的设置界面。根据Linux进程监控，在标准操作情况下闹钟最高会占用25-27%的CPU和2.4%的内存。当同时激活了网络电台，需要额外占用12%的CPU和2.5%的内存（根据配置变化最高会达到25%）。这明显给未来添加其他服务预留了内存和处理能力。</p>
<p>阿格利亚罗斯金大学的4个信息学理学硕士进行了用户试验，获取到了闹钟功能反馈。在独立评估LCD模块和控制板的可用性之前，我们向每个学生提供了一份闹钟的概要。</p>
<p><img src="http://ww4.sinaimg.cn/large/674a21d2gw1edq7vmp2b1j20uu0gyacu.jpg" alt="图3-在20x4液晶显示模块上的闹钟屏幕布局"></p>
<p>用户反馈了如下的建议：</p>
<ul>
<li>使用更大的屏幕提高清晰度和添加新的服务</li>
<li>连接谷歌日历接口以便在提醒日之前一天显示邀约。</li>
<li>提供一个更直观的方式配置提醒设置，比如更大的屏幕，语音命令或者配套的智能手机应用。</li>
<li>将程序移植成为一个智能手机应用，以便在不在家的情况下使用。</li>
<li>添加社交媒体Feeds,比如Facebook和Twitter。</li>
</ul>
<h2 id="-">结论和未来的工作</h2>
<p>这项工作表明，出于物联网创新的目的，智能物体中集成树莓派这类SoC板子，可以极大地提高这些对象的本地处理能力，并且不需要常见标准PC那样的电能耗费。小型的SoC板子使得智能物体可以被用在那些标准PC不适用的场景下。由于树莓派的计算能力仅相当于300MHz的奔腾ⅡPC[20],在闹钟的设计和研发过程中，数据传输是有限制的（尽可能）使用轻量级的标准，比如JSON。数据存储也限制于本地文件存储而不是专业的数据库。</p>
<p>虽然Bing地图服务提供了一个简单的RESTful接口用于请求沿线的交通数据，但使用此服务有一个限制是要从服务所提供的描述来计算延迟。谷歌地图结合了生活和历史交通数据有效地计算出了延迟时间[21]，虽然在写这篇论文的时候，通过谷歌地图API获取这些信息需要有商业许可。英国高速公路管理局在data.gov.uk网页上通过XML格式发布了实时的交通数据信息。[22]这是一个综合的未经加工的实时数据信息，但是需要翻译成地理路线，这超过了本项目范围目标之外。</p>
<p>在当前的实现中，本地温湿度传感器是直接通过XBee无线模块直接传输数据的。传感器的读数可以发布到互联网上的服务比如Xively（以前被称为Cosm and Pachube）[23],它提供了API以供其它服务去使用读数。考虑到无线传感器的数量有限，也可以通过闹钟的WiFi适配器直接传输传感器数据到互联网。使用闹钟去发布数据占用很少的硬件资源开销，但是添加传感器可能会导致闹钟性能的影响。普适计算的一个基本概念是通过传感器和计算能力与环境融为一体，从而利于人类居住者[24],因此，智能物体开始和很多其它的本地网络节点（其它智能物体与本地传感器/执行器）交互，其对于计算开销的要求也相应地提高。一个解决方案是将所有的节点发送到本地的专用智能网关，它可以获取内部和外部（互联网）的节点数据。其中一个现在正在开发的这类网关是思科的EVA Alpha板子，它适用于树莓派[25]，它的特点是将多个无线传感器网络协议集成到一个单板上。树莓派作为本地网络和互联网之间的网关。该模型的优势包括通过限制直接联网数量增加了网络的安全性，减少了节点的资源过载，并且让网络协议与自动化节点发现和订阅[26]功能两者间能更好的协同工作。</p>
<p>所有用于创建闹钟的组件在DIY社区里面都有着广泛的文档记录，并且可以自由获取，这使得物联网领域的创新潜力大大提升。对于传统的产品设计而言，最终用户是预定义解决方案的使用人，相比之下，产品创新DIY方法是实现更加个性化和多终端产品的催化剂。</p>
<h2 id="-">参考资料</h2>
<ol>
<li>Marc Roelands, Laurence Claeys, Marc Godon, Marjan Geerts, Mohamed Ali Feki, Lieven Trappeniers, Enabling the Masses to Become Creative in Smart Spaces, Architecting the Internet of Things, Springer-Verlag, Berlin Heidelberg (2011), 38, 42-43, 40.</li>
<li>Chin J, Callaghan V., Embedded-Internet Devices: A Means of Realising the Pervasive Computing Vision, Proceedings of the IADIS International Conference WWW/Internet 2003, ICWI 2003, Algarve Portugal, 2003</li>
<li>Irena Pletikosa Cvijikj, Florian Michahelles, The Toolkit Approach for End-user Participation in the Internet of Things, Architecting the Internet of Things, Springer-Verlag, Berlin Heidelberg (2011), 66.</li>
<li>Karotz: <a href="http://store.karotz.com/en_US/" target="_blank">http://store.karotz.com/en_US/</a></li>
<li>Cuno Pfister, Getting Started with the Internet of Things, O’Reilly Media Inc., Sebastopol, CA, USA,
2011</li>
<li>Matt Richardson and Shawn Wallace, Getting Started with Raspberry Pi, O’Reilly Media Inc.,
Sebastopol, CA, USA, 2013</li>
<li>Robert Faludi, Building Wireless Sensor Networks, O’Reilly Media Inc., Sebastopol, CA, USA, 2011 </li>
<li>La Crosse Technology: <a href="http://wwwlacrossetechnology.com/308-145/" target="_blank">http://wwwlacrossetechnology.com/308-145/</a></li>
<li>Eric Gaertner, DPAC – The Dynamically Programmable Alarm Clock: <a href="http://egaertner.com/dpac/" target="_blank">http://egaertner.com/dpac/</a></li>
<li>BBC News, Smart alarm clock lets you lie in: <a href="http://news.bbc.co.uk/1/hi/technology/2269144.stm" target="_blank">http://news.bbc.co.uk/1/hi/technology/2269144.stm</a></li>
<li>Raspberry Pi Forum: <a href="http://www.raspberrypi.org/phpBB3/" target="_blank">http://www.raspberrypi.org/phpBB3/</a></li>
<li>Digi International: <a href="http://ftp1.digi.com/support/documentation/90000982_B.pdf" target="_blank">http://ftp1.digi.com/support/documentation/90000982_B.pdf</a></li>
<li>Futulec MCP23008 Datasheet: <a href="https://www.futurlec.com/SFMicrochip/MCP23008.shtml" target="_blank">https://www.futurlec.com/SFMicrochip/MCP23008.shtml</a></li>
<li>HobbyTronics: <a href="http://www.hobbytronics.co.uk/lcd-20-4-backlight-blue" target="_blank">http://www.hobbytronics.co.uk/lcd-20-4-backlight-blue</a></li>
<li>Maxdetect: <a href="http://dlnmh9ip6v2uc.cloudfront.net/datasheets/Sensors/Weather/RHT03.pdf" target="_blank">http://dlnmh9ip6v2uc.cloudfront.net/datasheets/Sensors/Weather/RHT03.pdf</a></li>
<li>Netduino: <a href="http://netduino.com/netduinoplus2/specs.htm" target="_blank">http://netduino.com/netduinoplus2/specs.htm</a></li>
<li>MSDN Bing Maps REST Services: <a href="http://msdn.microsoft.com/en-us/library/ff701713.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ff701713.aspx</a></li>
<li>Met Office DataPoint: <a href="http://www.metoffice.gov.uk/datapoint" target="_blank">http://www.metoffice.gov.uk/datapoint</a></li>
<li>MPC Linux man page: <a href="http://linux.die.net/man/1/mpc" target="_blank">http://linux.die.net/man/1/mpc</a></li>
<li>Raspberry Pi FAQs: <a href="http://www.raspberrypi.org/faqs" target="_blank">http://www.raspberrypi.org/faqs</a></li>
<li>Google Maps: <a href="http://support.google.com/maps/bin/answer.py?hl=en&amp;answer=2549020" target="_blank">http://support.google.com/maps/bin/answer.py?hl=en&amp;answer=2549020</a></li>
<li>Data.gov.uk: <a href="http://data.gov.uk/dataset/live-traffic-information-from-the-highways-agency-road-
network">http://data.gov.uk/dataset/live-traffic-information-from-the-highways-agency-road-
network</a></li>
<li>Xively.com: <a href="https://xively.com/" target="_blank">https://xively.com/</a></li>
<li>Satyanarayanan, M, Pervasive computing: vision and challenges, Personal Communications, vol. 8,
Issue 4 (2001), 10-17</li>
<li>Kickstarter, EVE Alpha - Raspberry Pi wireless development hardware:
<a href="http://www.kickstarter.com/projects/ciseco/eve-alpha-raspberry-pi-wireless-development-hardwa" target="_blank">http://www.kickstarter.com/projects/ciseco/eve-alpha-raspberry-pi-wireless-development-hardwa</a></li>
<li>Tools for the open source Internet of things: <a href="http://iot-toolkit.com/" target="_blank">http://iot-toolkit.com/</a></li>
</ol>
]]></content>
    <summary type="html"><![CDATA[<h2 id="-">原文</h2>
<p><a href="http://www.deepdyve.com/lp/institute-of-electrical-and-electronics-engineers/a-diy-approach-to-pervasive-computing-for-the-internet-of-things-a-KOj52wCzTu" target="_blank">http://www.deepdyve.com/lp/institute-of-electrical-and-electronics-engineers/a-diy-approach-to-pervasive-computing-for-the-internet-of-things-a-KOj52wCzTu</a></p>
<h2 id="-">摘要</h2>
<p>本文通过一个智能闹钟的例子，探讨了物联网（IoT）DIY社区如何使用最新开发的低成本系统级芯片（SoC）开发板来促进智能对象的创新进程。这个闹钟将使用本地的温度传感器读数结合现有的交通和天气Web服务，提供给用
户合适的提醒时间。并且包括了一个对现今可用的物联网部件和最先进的提
供增强功能的闹钟的简要回顾。提供一种对闹钟软硬件部件描述和判断。CPU
和内存资源测试表明了SoC设备在智能闹钟下的适用性。用户反馈则为闹钟功
能提供了进一步发展的建议。</p>
]]></summary>
    
      <category term="译文" scheme="http://yoursite.com/tags/%E8%AF%91%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[基于树莓派DIY家居自动化 (译)]]></title>
    <link href="http://yoursite.com/2014/02/19/home-automation-with-raspberry-pi/"/>
    <id>http://yoursite.com/2014/02/19/home-automation-with-raspberry-pi/</id>
    <published>2014-02-19T06:37:31.000Z</published>
    <updated>2014-02-19T14:36:35.000Z</updated>
    <content type="html"><![CDATA[<h2 id="-">原文</h2>
<ul>
<li><a href="http://electronician.hubpages.com/hub/DIY-Home-Automation-with-Raspberry-Pi" target="_blank">http://electronician.hubpages.com/hub/DIY-Home-Automation-with-Raspberry-Pi</a></li>
<li><a href="http://electronician.hubpages.com/hub/Home-Automation-Sensors" target="_blank">http://electronician.hubpages.com/hub/Home-Automation-Sensors</a>
（有少量删减与整合）</li>
</ul>
<h2 id="-">通过树莓派使你的家庭智能化</h2>
<p>树莓派是一个廉价的电路板，又称微控制器。它其实是一个在单片机上的小型电脑，最初设计出来是出于兴趣以及帮助学生学习电子和编程。和常见的电脑比较，它非常节能，这意味着它可以一直处于打开状态而不会耗费多少电能，并且它能够很容易地被连接到各种外设和电路板上。</p>
<a id="more"></a>

<p>以上这些特点使得用树莓派DIY家居自动化是一个理想的选择。它可以被用于控制你的电灯，家电，安防设备，以及网络娱乐设备等等。有很多的由业余爱好者和DIY爱好者组成的网络社区广泛使用树莓派进行巧妙的项目，并且有一些的高质量开源项目你可以用来上手。</p>
<p>本文将要向你介绍一些最好的资源，开源软件项目，以及其他配件或外设，你可以用它们来开始制作自己的智能家居系统。我也会着重介绍一些其他人实现并分享在网上的令人激动的项目，以便给你一些灵感，另外提供一些其他资源的网址供参考。</p>
<h2 id="-">无线家庭自动化</h2>
<p><img src="http://ww2.sinaimg.cn/large/674a21d2gw1edooaf35a6j207804w3yl.jpg" alt="无线家庭自动化"></p>
<p>Z-Wave是一种流行的家居自动化技术，可以被用于无线控制很多家用电器和电子设备。你可以通过手机App使用它去控制你的照明或暖气,去设置计划事件或场景，提高家庭安全以及其它更多的应用。</p>
<p>控制器使用了Z-Wave无线信号去和安装在你家里的设备通信，通常你可以通过一个App去控制你的系统。由于它的安装简单，不需要太多技术知识，因而在DIY爱好者中很流行，当然，对于拥有更多进阶知识的爱好者而言，它也能被黑掉并且修改。</p>
<h4 id="-">技术特征</h4>
<p>Z-Wave技术一个最重要技术特征是它采用一种叫做“多跳网络”。多跳网络拓扑意味着每个通信都广播到所有在范围内的设备，然后每个设备作为一个“转发器”，传递信息给所有的邻居。</p>
<p>多跳网络的使用具有两大优势。首先，它提高了可靠性。例如，要在客厅的控制器和楼上卧室的暖气片之间发送消息，可能同时有多条路径可以选择，这意味着在传输中不大可能丢失或者受到干扰。再者，它可以扩大范围。如果在控制器和受控设备距离比较远的情况下，大多数系统需要使用专门的转发器。由于在Z-Wave网络中每个设备相当于一个转发器，就不需要专门的转发器，只需要两者之间有另一个设备（比如楼梯灯）。</p>
<p>和很多系统一样，Z-Wave还支持双向设备通信，以便于设备可以将他们自己的状态反馈给控制器。</p>
<h4 id="-">其他技术规范</h4>
<ul>
<li>使用低功率的无线电频率（RF）通信。</li>
<li>工作在1GHz频带。这意味着它不受Wi-Fi，蓝牙或者其它流行的无线系统干扰</li>
<li>支持数据传输速率可达100kbps，并具有很强的AES128加密</li>
<li>支持多通道操作</li>
<li>基于IPv6</li>
<li>完全的向后兼容。这意味着新产品能很好的和旧产品一起工作</li>
<li>适用于智能能源协议比如OpenADR和SEP1.1</li>
</ul>
<h2 id="-diy-z-wave-">建立你自己DIY的Z-Wave家居自动化控制器</h2>
<p>Z-Wave是最流行的家居自动化协议之一。协议是便于一些用于电子设备互相通讯的规则，因此它们可以很容易地组合以创建设备网络。这意味着有很多产品，比如传感器，照明开关，调光器，恒温器，散热器阀门执行器，报警器等等都可以很轻松地被应用于Z-Wave智能家居系统中。</p>
<p>Z-Wave产品很容易安装到自己家里面，因此它们在DIY爱好者之中很流行。但是大多数人还是会购买一个现成的控制器。控制器是一个电子盒或者迷你计算机，它是你智能家居系统的“大脑”，通过任意的传感器或者开关作为输入，并且通常需要一个手机App,用来转化成命令去控制你的电器系统和电子设备。</p>
<p>如果你想要一个更廉价并且更有趣的选项，你可以采用树莓派加上U盘以及一些开源软件，去创建属于自己的控制器。虽然我不会将这描述为一个简单的项目，但你完成这些并不要求你是一个电子专家。一个正常智商并且专注的初学者就可以完成。</p>
<p>Z-Stick是一个非常好用的工具，它能讲将任何电脑变成一个Z-Wave家居自动化控制器。它很便宜，并且采用的是自供电的USB加密狗形式。Z-Stick能够识别Z-Wave设备，并将他们添加到你的网络中，然后作为一个翻译和通信设备，桥接你的计算机和家居自动化网络。如果你愿意，你可以使用这个将老电脑变成一个控制器，不过个人觉得这并不是一个好主意。首先，普通PC一直开启消耗的电能比较大。其次，旧电脑可能存在可靠性问题，而新电脑则比直接买一个现成的控制器更昂贵。</p>
<p>我们更感兴趣的是使用树莓派，并且已经有一个非常好的产品叫做Razberry。Razberry是一种树莓派的扩展板，它很容易被连接到Pi上，当你配合Z-Stick使用的时候，你已经有了全套的关联设备，包括智能手机应用。</p>
<p>除了硬件，Razberry板自带了一些优秀的开源软件，你可以用于自定义你的核心内容。它自带了一个示例程序，你可以通过很少的设置,通过安卓或者苹果手机去控制你的系统。这个程序是用Javascript编写的，这是最流行的编程语言之一，同时也被认为是初学者友好的。这使得它很容易让任何人通过示例应用程序自定义，甚至可以从头开始构建自己的。后端是用Python编写的。</p>
<p>硬件设置并不难，这意味着大部分人能够在短时间内没有太多困难的去完成一个控制器。</p>
<h2 id="-">用于家居自动化的传感器</h2>
<h4 id="-">运动和占用传感器</h4>
<p>运动检测器是家庭自动化系统最流行的传感器之一。它们常常被用于多种用途，比如在家里没人时检测到运动，会触发防盗报警器，或者当你进入或者离开房间时自动开关灯。</p>
<p>最常见运动检测器是“被动式红外传感器”，或者叫做PIR。它的工作原理是通过检测其在视野范围内的红外辐射变化。选购PIR时有效范围是非常重要的，虽然大多数PIR能够轻松地覆盖一个房间，对于大房间，特别是开放式设计的建筑物可能需要一个以上。</p>
<p>占有或者存在检测器的基本技术和常见的运动传感器技术相同，但是具有更高的分辨率。你可以很便宜地购买到PIR，它们对于很多应用程序都十分有用，比如，防盗报警或者控制楼道灯。但是如果你需要一个随时检测客厅是否被占用的系统，比如，控制光照自动照明和供暖，廉价的产品是不足够的。因为他们需要运动去触发，如果你在沙发上读书，传感器可能会错误的发送一个信号说房间是空的。存在或者占用检测器能够确定一个人是否在房间，仅仅通过他们的呼吸。</p>
<p>提示：如果你有宠物，那么你最好找一个灵敏度可调的产品。以便于你手动找到合理的平衡，而不是每次你的猫走过去都会触发。</p>
<h4 id="-">光传感器</h4>
<p>光传感器又被称为光敏二极管。它用来监测环境光水平，并且向你的家具自动化控制器报告。它通常和运动或存在传感器一起使用，以便在有人进入房间时，并在必要时，打开灯的开关。它们也被用来确保安全灯只在天黑后打开，或者在黄昏时将室外灯自动打开。如果你在室外使用光传感器，你要确保同时购买一个合适的防水外壳。</p>
<h4 id="-">温湿度传感器</h4>
<p>温湿度传感器经常被用于集成到恒温器单元或者暖气阀门，但是有些时候你可能需要安装为一个独立的温度计。小的温度传感器可以很容易地嵌入到墙中，这可以避免在墙上或者天花板上放更多的难看的盒子。</p>
<p>结合一个湿度传感器使用时，它们可以用来自动控制空调或者加湿器，甚至在房间变得太闷热时自动打开窗户。</p>
<p>防水的温度传感器可以用于室外，例如，你可以在你出门前检查你的庭院加热器是否需要打开。它们也可以用在热水壶中去检测水温。</p>
<p>提示：温度传感器的位置会显著地影响它们的功能。最理想的情况下，他们应该放置在远离大门和控制器的位置，距离天花板稍微往下。如果你注意到一些房间感觉比其它设置在同一温度时更热，这可能是跟传感器位置有关。当然，如果你已经注意到了这些问题，你可以改变温度设置，而不一定需要移动传感器位置。</p>
<h4 id="-">整合型传感器</h4>
<p>由于运动，光，温湿度传感器在家居自动化系统中使用非常普遍，一些制造商将它们打包成一个独立的单元称之为整合型传感器。购买3或4个元件整合在一起开源节省资金，并且可以减少贴在你天花板和墙壁的塑料盒数量。</p>
<h4 id="-">火灾报警传感器</h4>
<p>在家居系统中的火灾报警传感器有3个主要的类型：</p>
<ul>
<li>光学/光电：这是最常见的类型。它使用光束来探测，如果烟雾颗粒中断了光束则会触发报警。</li>
<li>电离：检测空气中的电离粒子，这类比光学更敏感。然而，这意味着它比光学传感器更容易产生误报警。许多现代系统使用光学和电离的组合。</li>
<li>热：检测到异常的温度</li>
</ul>
<p>提示：如果你在烹饪时触发了报警，并且一直持续，请不要断开它而让自己处于无保护状态。这类误报是由于使用了错误类型的警报器。很多人甚至不知道有各种不同类型的警报器，因而在厨房周围安装了错误类型的警报器。不过请记住，这是一个高风险区域，并且绝对不能没有探测器。最好是使用一个热探测器，这将不会被油炸或者烤面包时烟雾所触发，但仍然可以及时检测到潜在的火灾从而拯救你的生命。</p>
<h4 id="-">一氧化碳传感器</h4>
<p>火并不是你需要保护你家人免受伤害的唯一风险。在美国，每年有成百上千人由于错误地使用家用电器导致一氧化碳中毒死亡。</p>
<p>一氧化碳是一种无色，无味的气体，它可以杀人于无形。中毒症状包括头痛，头晕，恶心，所有这些都是容易由其他事物引起的，这意味着有些患者可能仅仅认为他们自己只是由于天气原因导致的不舒服，去趟一会儿，但永远醒不来了。</p>
<p>提示：保护你的家人最经济的方法是购买一个一氧化碳和火警混合的报警，但是如果这不是一个先进的家居自动化系统组成部分，请确保你记住了不同的报警声音，而不至于误认为是火警误报却实际上是一氧化碳报警。</p>
<h4 id="-">洪水和泄漏传感器</h4>
<p>洪水或泄漏传感器通常安装在浴室或者厨房水槽，或者在其它有高风险导致泄漏的地方。由于水的危害主要是针对你的财产，如果你及早发现你的水管泄漏，你可以节省很多麻烦和费用。对于质量好的洪水/泄漏探测器，可以检测出来很小的泄漏，如果连接到阀门，它们能够自动地关闭水源，防止带来损失。</p>
<h4 id="-">接近传感器</h4>
<p>在某些系统中，接近传感器可以用来替代开关。这将允许用户只需简单地将手轻轻拂在安装了传感器的墙上，而不需要实际按下去触发，例如，打开电灯。它们也可以广泛地被用在更先进的系统中,比如自动喂鸟器。</p>
<h4 id="-">接触式传感器</h4>
<p>接触传感器也被广泛使用，最常见的一种是防盗警报。传感器本身是一种开关，它在两个表面相接触时会发送一个电信号。它们可以被用于检测是否有门或窗开启或关闭。</p>
<p>家庭安全系统通常在窗框中使用接触式传感器，传感器激活后，如果窗户被打开，则会触发报警。还有很多其他应用，比如：</p>
<ul>
<li>如果有人打开窗户，自动关闭房间里面的暖气，节约能源并且使房间更容易凉快下来。</li>
<li>如果电动门系统安装了，你可以从远程检查门是打开还是关闭的。</li>
<li>当你打开门的时候点亮柜灯。</li>
</ul>
<h4 id="-">玻璃破裂传感器</h4>
<p>有两种不同的传感器，可以用来检测入侵者打碎玻璃进入你的房子。</p>
<p>第一种类型是安装在窗口本身，限制于它的实用性仅在于保护整个玻璃。这种又被称为“震荡传感器”，它由所贴合的玻璃破碎时产生的高频率震动触发。</p>
<p>第二种类型基本上是一个专门调试过用于辨别玻璃破碎声音的麦克风。这种更有用，因为单一的探测器甚至能够覆盖有很多窗户的大房间。</p>
<h4 id="-">麦克风</h4>
<p>在我看来，语言控制是建立一个家庭自动化系统最有趣的特性之一。虽然语音识别技术已经有一段时间了，通过语音命令控制你家用电器和电子设备还是令人激动。</p>
<p>很明显，如果你想要语音识别功能，你需要一个麦克风。所需的麦克风质量不需特别高，所以无需花一大笔钱在专业品质的产品上。</p>
<p>最近推出的一个有趣的系统是CastleOS,利用了微软Xbox的Kinnect系统，或者Windows去检测和翻译语音命令。由于Kinnect是一个高质量的系统，它非常可靠和灵活，但如果你想在家里的每个房间都使用，那将会很昂贵。</p>
<h4 id="-">车道探针</h4>
<p>将一个车道探针嵌入到你家的外面的车道，然后你就能用来探测车辆的到达和离开。这个信息可以被用在自动化系统中，比如，在你离开时打开车库门。它也可以被用做为警报系统的一个部分，在车辆到达你的车道时开始记录，并且过一段时间自动触发警报。</p>
<p><img src="http://ww4.sinaimg.cn/large/674a21d2gw1edp20mupb4j20eg05vt8q.jpg" alt="车道探针"></p>
<h2 id="-raspbmc-">树莓派和用于网络家庭娱乐的Raspbmc系统</h2>
<p>XBMC是一个优秀的开源软件系统，通过它你可以打造属于你自己的家庭影院电脑，媒体服务器，并通过自定义的机顶盒将你的普通电视变成智能电视。这是一个建立你自己的廉价网络家庭娱乐系统的好方案。</p>
<p>大部分人安装XBMC到个人电脑，但你也可以使用树莓派。树莓派的最创新的特性之一是它对高清晰度视频格式的支持，因而是此类项目的一个好选择。</p>
<p>Raspbmc是开源Linux系统Debian的一个免费分发版本，和树莓派使用同样的操作系统。它预装了为低功率PI板子优化过的XBMC。相比其他的DIY家庭影院、网络家庭娱乐系统软件，比如Myth TV，Raspbmc更易于安装和使用，即使你之前从未使用过Linux。当然，它也有着很多先进的特性和定制选项。</p>
<h2 id="privateeyepi-">PrivateEyePi 家庭监控</h2>
<p>PrivateEyePi提供免费的开源软件，你可以用于构建一系列的DIY智能家居项目，侧重于“家庭监控”。如果你对于使用Pi创建自有的家居安保系统感兴趣，那么这就是一个很好的开始。</p>
<p>除了免费的软件，PrivateEyePi有着手把手教程对于一系列项目。并且也有一个价格合理的商店提供，便于你去购买可能需要的一些额外组件和设备。</p>
<p><img src="http://ww1.sinaimg.cn/large/674a21d2gw1edoocmcnftj20eg0b5gm2.jpg" alt="PrivateEyePi"></p>
<h2 id="homeaidpi">HomeAidPi</h2>
<p>HomeAidPi和Razberry遵循一个类似的概念，除了它支持更大范围的系统并且更贵一点。HomeAidPi本身是免费的软件，它将你的Pi转变成一个智能家居控制器，可以广泛用于流行的协议比如，Insteon，X-10和Zigbee等。</p>
<p><img src="http://ww1.sinaimg.cn/large/674a21d2gw1edoodfcgyaj20eg09xjse.jpg" alt="HomeAidPi"></p>
<h2 id="-">其他资源 - 一些教程和开源软件</h2>
<h4 id="pihome-">PiHome 树莓派家庭自动化开源项目</h4>
<p>这是一个适用于树莓派的高质量开源DIY家居自动化解决方案，可能并不适合初学者。
<a href="http://pihome.harkemedia.de/" target="_blank">http://pihome.harkemedia.de/</a></p>
<h4 id="rasplogic">RaspLogic</h4>
<p>Rasplogic是一个软件，它提供简单的，用户友好的并且廉价的方法，去控制房间中的一切东西。楼宇自动化系统是我们的主要关注点
<a href="http://www.rasplogic.com/the-project/" target="_blank">http://www.rasplogic.com/the-project/</a></p>
<h4 id="raspberry-pi-gpio-">Raspberry Pi GPIO 家庭自动化</h4>
<p><a href="http://www.instructables.com/id/Raspberry-Pi-GPIO-home-automation/" target="_blank">http://www.instructables.com/id/Raspberry-Pi-GPIO-home-automation/</a></p>
<h4 id="-arudino-">如何使用树莓派和Arudino实现一个家居自动化系统</h4>
<p><a href="http://www.makeuseof.com/tag/how-to-build-home-automation-system-raspberry-pi-and-arduino/" target="_blank">http://www.makeuseof.com/tag/how-to-build-home-automation-system-raspberry-pi-and-arduino/</a></p>
]]></content>
    <summary type="html"><![CDATA[<h2 id="-">原文</h2>
<ul>
<li><a href="http://electronician.hubpages.com/hub/DIY-Home-Automation-with-Raspberry-Pi" target="_blank">http://electronician.hubpages.com/hub/DIY-Home-Automation-with-Raspberry-Pi</a></li>
<li><a href="http://electronician.hubpages.com/hub/Home-Automation-Sensors" target="_blank">http://electronician.hubpages.com/hub/Home-Automation-Sensors</a>
（有少量删减与整合）</li>
</ul>
<h2 id="-">通过树莓派使你的家庭智能化</h2>
<p>树莓派是一个廉价的电路板，又称微控制器。它其实是一个在单片机上的小型电脑，最初设计出来是出于兴趣以及帮助学生学习电子和编程。和常见的电脑比较，它非常节能，这意味着它可以一直处于打开状态而不会耗费多少电能，并且它能够很容易地被连接到各种外设和电路板上。</p>
]]></summary>
    
      <category term="译文" scheme="http://yoursite.com/tags/%E8%AF%91%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[树莓派适用的传感器(一)]]></title>
    <link href="http://yoursite.com/2014/02/12/sensors-for-raspberry-pi-1/"/>
    <id>http://yoursite.com/2014/02/12/sensors-for-raspberry-pi-1/</id>
    <published>2014-02-12T05:47:19.000Z</published>
    <updated>2014-02-14T07:52:53.000Z</updated>
    <content type="html"><![CDATA[<h2 id="dht11-">DHT11 温湿度传感器</h2>
<h3 id="-">技术参数</h3>
<ul>
<li>供电电压:3.3-5.5V DC</li>
<li>输出:单总线数字信号</li>
<li>测量范围:湿度20-90%RH ，温度0-50℃</li>
<li>测量精度:湿度+-5%RH， 温度+-2℃</li>
</ul>
<a id="more"></a>

<h3 id="-">接线图例</h3>
<p><img src="http://ww4.sinaimg.cn/large/674a21d2gw1edgk7ctgq7j20fd06laa6.jpg" alt="接线图"></p>
<h2 id="hc-sr04-">HC-SR04 超声波测距模块</h2>
<h3 id="-">技术参数</h3>
<ul>
<li>供电电压：5V DC</li>
<li>静态电流：小于2mA</li>
<li>感应角度：不大于15°</li>
<li>探测距离：2cm-450cm</li>
<li>精度：0.2cm</li>
</ul>
<h3 id="-">接线图例</h3>
<p><img src="http://ww1.sinaimg.cn/large/674a21d2gw1edgwyknjqcj20eq0a9wew.jpg" alt="接线图"></p>
<h3 id="-">参考资料</h3>
<p><a href="http://www.raspberrypi-spy.co.uk/2012/12/ultrasonic-distance-measurement-using-python-part-1/" target="_blank">http://www.raspberrypi-spy.co.uk/2012/12/ultrasonic-distance-measurement-using-python-part-1/</a></p>
<h2 id="hc-sr501-">HC-SR501 人体红外传感器</h2>
<h3 id="-">技术参数</h3>
<ul>
<li>供电电压：5 - 20V DC</li>
<li>静态功耗：65微安</li>
<li>电平输出：高3.3V 低0V</li>
<li>延时时间：0.3-18秒（可调）</li>
<li>触发方式：L不可重复 H可重复 默认H</li>
<li>感应范围：小于120°锥角 7米内</li>
<li>工作温度：-15 - +70 ℃</li>
</ul>
<h3 id="-">接线图例</h3>
<p><img src="http://ww1.sinaimg.cn/large/674a21d2gw1ediygtzvvhj20fa06ywen.jpg" alt="接线图"></p>
<h3 id="-">参考资料</h3>
<p><a href="http://www.raspberrypi-spy.co.uk/2013/01/cheap-pir-sensors-and-the-raspberry-pi-part-1/" target="_blank">http://www.raspberrypi-spy.co.uk/2013/01/cheap-pir-sensors-and-the-raspberry-pi-part-1/</a></p>
]]></content>
    <summary type="html"><![CDATA[<h2 id="dht11-">DHT11 温湿度传感器</h2>
<h3 id="-">技术参数</h3>
<ul>
<li>供电电压:3.3-5.5V DC</li>
<li>输出:单总线数字信号</li>
<li>测量范围:湿度20-90%RH ，温度0-50℃</li>
<li>测量精度:湿度+-5%RH， 温度+-2℃</li>
</ul>
]]></summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于树莓派GPIO接口 一些资料整理]]></title>
    <link href="http://yoursite.com/2014/02/11/raspberry-pi-gpio/"/>
    <id>http://yoursite.com/2014/02/11/raspberry-pi-gpio/</id>
    <published>2014-02-11T12:04:39.000Z</published>
    <updated>2014-02-11T15:18:00.000Z</updated>
    <content type="html"><![CDATA[<h2 id="-">前言</h2>
<p>去年12月份入手了树莓派，由于同时在实习，一直没太多时间去把玩她，趁着要做毕业设计，加上寒假在家，就着手开始折腾。</p>
<p>折腾的同时记录一些资料于此，方便之后使用。</p>
<a id="more"></a>

<h2 id="-gpio">什么是GPIO</h2>
<p>作为一台廉价Linux电脑，树莓派与我们日常所见的PC最明显的不同，在于她提供了一组GPIO
（General Purpose Input &amp; Output, 通用型输入输出）接口。</p>
<p><img src="http://ww3.sinaimg.cn/large/674a21d2gw1edfrpddve1j20720g53zr.jpg" alt="GPIO接口引脚图"></p>
<p>上图可见部分引脚有两个标记，R1表示第一版树莓派(256MB内存版本)，R2表示第二版（512MB内存）
对于树莓派版本的判别，也可以通过在终端中输入以下命令查看CPU信息</p>
<p><code>cat /proc/cpuinfo</code></p>
<p>其中的Revision信息为0002或0003，则为第一版，更大的版本号或者包含字母则为第二版</p>
<p>GPIO端口提供了7个通用的引脚和pin7 (GPIO4),默认提供时钟信号，但也可以做一般用途。总共8个引脚可以在两个状态之间切换：正电压3.3V高电平，以及接地或者0V的低电平，相当于 1和0的二进制逻辑，并可以用于打开或者关闭其他组件。</p>
<h2 id="-gpio">如何操作GPIO</h2>
<h3 id="-gpio-">官方GPIO模块</h3>
<p>树莓派默认的Raspbian系统新版内置了该GPIO模块，对于早期版本则需要手动安装</p>
<p>安装</p>
<p><code>sudo apt-get install python-rpi.gpio</code></p>
<p>开源地址 <a href="http://sourceforge.net/projects/raspberry-gpio-python/" target="_blank">http://sourceforge.net/projects/raspberry-gpio-python/</a></p>
<h3 id="wiringpi">WiringPi</h3>
<p>WiringPi是一个针对树莓派平台封装好的驱动库，有C,Python,PHP,Ruby,Perl等多种语言的实现。</p>
<p>Python下安装可以直接使用pip安装</p>
<p><code>sudo pip install wiringpi2</code></p>
<p>开源地址 <a href="https://github.com/WiringPi/WiringPi-Python" target="_blank">https://github.com/WiringPi/WiringPi-Python</a></p>
<p>使用WiringPi库封装后的引脚映射关系图</p>
<p><img src="http://ww4.sinaimg.cn/large/674a21d2gw1edfq5oh4kkj20iy0hhta6.jpg" alt="映射关系图"></p>
<h2 id="-">参考资料</h2>
<p> 树莓派学习笔记 <a href="http://blog.csdn.net/xukai871105/article/category/1436049" target="_blank">http://blog.csdn.net/xukai871105/article/category/1436049</a></p>
<p>《Getting Started with Raspberry Pi》Matt Richardson &amp; Shawn Wallace</p>
<p>《Raspberry Pi 用户指南》 Eben Upton &amp; Gareth Halfacree</p>
]]></content>
    <summary type="html"><![CDATA[<h2 id="-">前言</h2>
<p>去年12月份入手了树莓派，由于同时在实习，一直没太多时间去把玩她，趁着要做毕业设计，加上寒假在家，就着手开始折腾。</p>
<p>折腾的同时记录一些资料于此，方便之后使用。</p>
]]></summary>
    
  </entry>
  
</feed>
